import java.util.ArrayList;
import java.util.List;

/* Generated By:JJTree: Do not edit this line. ASTIf.java Version 4.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTIf extends SimpleNode implements Type {
  public ASTIf(int id) {
    super(id);
  }

  public ASTIf(Parser p, int id) {
    super(p, id);
  }
  
  public Node getCond() { return (Node)jjtGetChild(0);}
  public Node getVrai() { return (Node)jjtGetChild(1);}
  public Node getFaux() { return (Node)jjtGetChild(2);}

  
 public Type type() throws TypeException {
	  Node cond = (Node)jjtGetChild(0);
	  Node vrai = (Node)jjtGetChild(1);
	  Node faux = (Node)jjtGetChild(2);
	  ASTBool booltype = new ASTBool(ParserTreeConstants.JJTTYPE);
	  if(!cond.type().equals(booltype.type()))//condition
		  throw new TypeException("The condition is not Boolean");
	  if(!vrai.type().equals(faux.type()))//S1 et S2
		  throw new TypeException("The two processes type are not equal");
	  return vrai.type();  
  }

 public List<OOTStatement> code() throws TypeException {
	 List<OOTStatement> listeRes = new ArrayList<OOTStatement>();
	 OOTExpr<OOTType> e = null;
	 
	 if( getCond().code().get(0) instanceof OOTOper){
		 e = (OOTOper)getCond().code().get(0);
 		}else{
		 e = (OOTLog)getCond().code().get(0);}
	 
	 ASTInt inttype = new ASTInt(ParserTreeConstants.JJTTYPE);
	 ASTBool booltype = new ASTBool(ParserTreeConstants.JJTTYPE);
	 OOTVar<OOTType> inter = null;
	 OOTDec declaration = null;
	
	 if(getVrai().type().equals(inttype.type())) {
		 inter = new OOTVar<OOTType>("public","inter"+this.id,new OOTTypeInt());
		 declaration = inter;
	 } else if(getVrai().type().equals(booltype.type())) {
		 inter = new OOTVar<OOTType>("public","inter"+this.id,new OOTTypeBool());
		 declaration = inter;
	 } 
	 OOTVarCall resultat = new OOTVarCall(inter);
	 listeRes.add(resultat);
	 
	 int dernier = getVrai().code().size();
	 
	 List<OOTStatement> vrai = getVrai().code();	 
	 OOTAssign assignInter = new OOTAssign(inter.type,inter,(OOTExpr)getVrai().code().get(dernier-1));
	 vrai.remove(dernier-1);
	 vrai.add(assignInter);
	 
	 List<OOTStatement> faux = getFaux().code();
	 dernier = getFaux().code().size();
	 assignInter = new OOTAssign(inter.type,inter,(OOTExpr)getFaux().code().get(dernier-1));
	 faux.remove(dernier-1);
	 faux.add(assignInter);
	 
	 OOTIf i = new OOTIf(e, vrai, faux);
	 listeRes.add(i);
	 List<OOTVar<?>> listeAppelante = new ArrayList<OOTVar<?>>();
	 listeAppelante.add(inter);
	 OOTMethConnu methC = new OOTMethConnu(listeAppelante,"","");
	 listeRes.add(methC);
	 
	 return listeRes;
 }
}
/* JavaCC - OriginalChecksum=4f90fdd68c2761a53c6cfd45448b2765 (do not edit this line) */
