import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

/* Generated By:JJTree: Do not edit this line. ASTGt.java Version 4.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTGt extends SimpleNode implements Type {
  public ASTGt(int id) {
    super(id);
  }

  public ASTGt(Parser p, int id) {
    super(p, id);
  }
  
  public Node getLeft() { return (Node)jjtGetChild(0);}
  public Node getRight() { return (Node)jjtGetChild(1);}
  
  public Type type() throws TypeException {
	  Node left = (Node)jjtGetChild(0);
	  Node right = (Node)jjtGetChild(1);
	  ASTInt inttype = new ASTInt(ParserTreeConstants.JJTTYPE);
	  if(!left.type().equals(right.type()) || !left.type().equals(inttype.type()))
		  throw new TypeException("One of the two parts is not Integer");
	  ASTType booltype=new ASTType(ParserTreeConstants.JJTTYPE);
	  booltype.jjtSetValue("Bool");
	  return booltype;
  }
  
	public List<OOTStatement> code() throws TypeException {
		OOTNode left=null;
		OOTNode right=null;
		OOTOper gt=null;
		List<OOTStatement> ls = new ArrayList<OOTStatement>();
		
		int i=0;
		if(this.getLeft() instanceof ASTTermVar) {
				ASTTermVar l = (ASTTermVar)this.getLeft();
				left = new OOTVar<OOTTypeInt>("public",l.getName(),new OOTTypeInt());
				} else if(this.getLeft() instanceof ASTAdd || this.getLeft() instanceof ASTMult || this.getLeft() instanceof ASTOpp) {
					ls.addAll(getLeft().code());
					left = ls.get(i);
					i++;
						} else {	  
							SimpleNode l = (SimpleNode)this.jjtGetChild(0);
							left = new OOTConstant<OOTTypeInt>(new OOTTypeInt(),String.valueOf(l.jjtGetValue())); 
								}

		if(this.getRight() instanceof ASTTermVar) {
			ASTTermVar r = (ASTTermVar) this.getRight();
			right = new OOTVar<OOTTypeInt>("public",r.getName(),new OOTTypeInt());
			gt = new OOTOper(left,right,">");
			} else if(this.getRight() instanceof ASTAdd || this.getRight() instanceof ASTMult || this.getRight() instanceof ASTOpp) {
						ls.addAll(this.getRight().code()) ;
						right = ls.get(i);
						i++;
				} else {
						SimpleNode r = (SimpleNode)this.jjtGetChild(1);
						right = new OOTConstant<OOTTypeInt>(new OOTTypeInt(),String.valueOf(r.jjtGetValue()));
						gt = new OOTOper(left,right,">");
						}

		gt= new OOTOper(left,right,">");
		ls = new ArrayList<OOTStatement>();
		ls.add(gt);
		return ls;
	}

}
/* JavaCC - OriginalChecksum=364c2cce554a579a4b52e822020750ed (do not edit this line) */
