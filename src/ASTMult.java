import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

/* Generated By:JJTree: Do not edit this line. ASTMult.java Version 4.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTMult extends SimpleNode implements Type {
  public ASTMult(int id) {
    super(id);
  }

  public ASTMult(Parser p, int id) {
    super(p, id);
  }
  
  public Node getLeft() { return (Node)jjtGetChild(0);}
  public Node getRight() { return (Node)jjtGetChild(1);}
  
  public Type type() throws TypeException {
	  Node left = getLeft();
	  Node right = getRight();
	  ASTInt inttype = new ASTInt(ParserTreeConstants.JJTTYPE);
	  if(!left.type().equals(right.type()) || !left.type().equals(inttype.type()))
		  throw new TypeException("One of the two parts is not Integer");
	  return left.type();	  
  }
  
  public List<OOTStatement> code() throws TypeException {
		OOTNode left=null;
		OOTNode right=null;
		OOTOper mult=null;
		List<OOTStatement> ls = new ArrayList<OOTStatement>();
		int i=0;
		if(this.getLeft() instanceof ASTTermVar) {
			ASTTermVar l = (ASTTermVar)this.getLeft();
			left = new OOTVar<OOTTypeInt>("public",l.getName(),new OOTTypeInt());
		} else if(this.getLeft() instanceof ASTAdd || this.getLeft() instanceof ASTMult || this.getLeft() instanceof ASTOpp) {
			ls.addAll(getLeft().code());
			left = ls.get(i);
			i++;
		} else {	  
			SimpleNode l = (SimpleNode)this.jjtGetChild(0);
			left = new OOTConstant<OOTTypeInt>(new OOTTypeInt(),String.valueOf(l.jjtGetValue())); 
		}

		if(this.getRight() instanceof ASTTermVar) {
			ASTTermVar r = (ASTTermVar) this.getRight();
			right = new OOTVar<OOTTypeInt>("public",r.getName(),new OOTTypeInt());
			mult = new OOTOper(left,right,"*");
		} else if(this.getRight() instanceof ASTAdd || this.getRight() instanceof ASTMult || this.getRight() instanceof ASTOpp) {
			ls.addAll(this.getRight().code()) ;
			right = ls.get(i);
			i++;
		} else {
			SimpleNode r = (SimpleNode)this.jjtGetChild(1);
			right = new OOTConstant<OOTTypeInt>(new OOTTypeInt(),String.valueOf(r.jjtGetValue()));
			mult = new OOTOper(left,right,"*");
		}

		mult= new OOTOper(left,right,"*");
		ls = new ArrayList<OOTStatement>();
		ls.add(mult);
		/*Iterator<OOTStatement> it = ls.iterator();
		while(it.hasNext()) {
			System.out.println(it.next().genCodeNode("toto"));
		}*/
		return ls;
	}

}
/* JavaCC - OriginalChecksum=5dfe3441ef033dc43a8b42c90f907a80 (do not edit this line) */
