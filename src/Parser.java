/* Generated By:JJTree&JavaCC: Do not edit this line. Parser.java */
//************************************************
// AUTHOR: Pablo Arrighi (pablo.arrighi@imag.fr)
// DATE: January 2008
//************************************************
public class Parser/*@bgen(jjtree)*/implements ParserTreeConstants, ParserConstants {/*@bgen(jjtree)*/
  protected static JJTParserState jjtree = new JJTParserState();

  static final public ASTStart start() throws ParseException {
    trace_call("start");
    try {
  /*@bgen(jjtree) #Start( 1) */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        term();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 0:
          jj_consume_token(0);
          break;
        case 34:
          jj_consume_token(34);
          break;
        default:
          jj_la1[0] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
          jjtree.closeNodeScope(jjtn000,  1);
          jjtc000 = false;
         {if (true) return jjtn000;}
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000,  1);
          }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("start");
    }
  }

  static final public void simpleterm() throws ParseException {
    trace_call("simpleterm");
    try {
 Token t;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case fun:
        fun();
        break;
      case let:
        let();
        break;
      case mif:
        mif();
        break;
      case mtrue:
        jj_consume_token(mtrue);
                                          ASTBool jjtn001 = new ASTBool(JJTBOOL);
                                          boolean jjtc001 = true;
                                          jjtree.openNodeScope(jjtn001);
        try {
                                          jjtree.closeNodeScope(jjtn001,  0);
                                          jjtc001 = false;
                                         jjtn001.value=true;
        } finally {
                                          if (jjtc001) {
                                            jjtree.closeNodeScope(jjtn001,  0);
                                          }
        }
        break;
      case mfalse:
        jj_consume_token(mfalse);
                                          ASTBool jjtn002 = new ASTBool(JJTBOOL);
                                          boolean jjtc002 = true;
                                          jjtree.openNodeScope(jjtn002);
        try {
                                          jjtree.closeNodeScope(jjtn002,  0);
                                          jjtc002 = false;
                                         jjtn002.value=false;
        } finally {
                                          if (jjtc002) {
                                            jjtree.closeNodeScope(jjtn002,  0);
                                          }
        }
        break;
      case 35:
        jj_consume_token(35);
                ASTNot jjtn003 = new ASTNot(JJTNOT);
                boolean jjtc003 = true;
                jjtree.openNodeScope(jjtn003);
        try {
          simpleterm();
        } catch (Throwable jjte003) {
                if (jjtc003) {
                  jjtree.clearNodeScope(jjtn003);
                  jjtc003 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte003 instanceof RuntimeException) {
                  {if (true) throw (RuntimeException)jjte003;}
                }
                if (jjte003 instanceof ParseException) {
                  {if (true) throw (ParseException)jjte003;}
                }
                {if (true) throw (Error)jjte003;}
        } finally {
                if (jjtc003) {
                  jjtree.closeNodeScope(jjtn003,  1);
                }
        }
        break;
      case NUM:
        t = jj_consume_token(NUM);
                                          ASTInt jjtn004 = new ASTInt(JJTINT);
                                          boolean jjtc004 = true;
                                          jjtree.openNodeScope(jjtn004);
        try {
                                          jjtree.closeNodeScope(jjtn004,  0);
                                          jjtc004 = false;
                                         jjtn004.value=Integer.parseInt(t.image);
        } finally {
                                          if (jjtc004) {
                                            jjtree.closeNodeScope(jjtn004,  0);
                                          }
        }
        break;
      case 36:
        jj_consume_token(36);
                ASTOpp jjtn005 = new ASTOpp(JJTOPP);
                boolean jjtc005 = true;
                jjtree.openNodeScope(jjtn005);
        try {
          simpleterm();
        } catch (Throwable jjte005) {
                if (jjtc005) {
                  jjtree.clearNodeScope(jjtn005);
                  jjtc005 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte005 instanceof RuntimeException) {
                  {if (true) throw (RuntimeException)jjte005;}
                }
                if (jjte005 instanceof ParseException) {
                  {if (true) throw (ParseException)jjte005;}
                }
                {if (true) throw (Error)jjte005;}
        } finally {
                if (jjtc005) {
                  jjtree.closeNodeScope(jjtn005,  1);
                }
        }
        break;
      case 37:
        jj_consume_token(37);
        t = jj_consume_token(NUM);
                                  ASTRef jjtn006 = new ASTRef(JJTREF);
                                  boolean jjtc006 = true;
                                  jjtree.openNodeScope(jjtn006);
        try {
                                  jjtree.closeNodeScope(jjtn006,  0);
                                  jjtc006 = false;
                         jjtn006.value=Integer.parseInt(t.image);
        } finally {
                                  if (jjtc006) {
                                    jjtree.closeNodeScope(jjtn006,  0);
                                  }
        }
        break;
      case mnull:
            ASTNull jjtn007 = new ASTNull(JJTNULL);
            boolean jjtc007 = true;
            jjtree.openNodeScope(jjtn007);
        try {
          jj_consume_token(mnull);
        } finally {
            if (jjtc007) {
              jjtree.closeNodeScope(jjtn007,  0);
            }
        }
        break;
      case print:
        jj_consume_token(print);
                    ASTPrint jjtn008 = new ASTPrint(JJTPRINT);
                    boolean jjtc008 = true;
                    jjtree.openNodeScope(jjtn008);
        try {
          simpleterm();
        } catch (Throwable jjte008) {
                    if (jjtc008) {
                      jjtree.clearNodeScope(jjtn008);
                      jjtc008 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte008 instanceof RuntimeException) {
                      {if (true) throw (RuntimeException)jjte008;}
                    }
                    if (jjte008 instanceof ParseException) {
                      {if (true) throw (ParseException)jjte008;}
                    }
                    {if (true) throw (Error)jjte008;}
        } finally {
                    if (jjtc008) {
                      jjtree.closeNodeScope(jjtn008,  1);
                    }
        }
        break;
      case recv:
        recv();
        break;
      case send:
        send();
        break;
      case at:
        mnew();
        break;
      case TERMVAR:
        termvar();
        break;
      case 38:
        jj_consume_token(38);
        term();
        jj_consume_token(39);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("simpleterm");
    }
  }

  static final public void term() throws ParseException {
    trace_call("term");
    try {
  int i=1;
      simpleterm();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case fun:
      case mif:
      case let:
      case mtrue:
      case mfalse:
      case and:
      case or:
      case eq:
      case leq:
      case geq:
      case mnull:
      case print:
      case recv:
      case send:
      case at:
      case NUM:
      case TERMVAR:
      case 35:
      case 36:
      case 37:
      case 38:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case and:
            ASTAnd jjtn001 = new ASTAnd(JJTAND);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
          try {
            label_1:
            while (true) {
              jj_consume_token(and);
              simpleterm();
                               i++;
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case and:
                ;
                break;
              default:
                jj_la1[2] = jj_gen;
                break label_1;
              }
            }
          } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte001;}
            }
            if (jjte001 instanceof ParseException) {
              {if (true) throw (ParseException)jjte001;}
            }
            {if (true) throw (Error)jjte001;}
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  i);
            }
          }
          break;
        case or:
            ASTOr jjtn002 = new ASTOr(JJTOR);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
          try {
            label_2:
            while (true) {
              jj_consume_token(or);
              simpleterm();
                              i++;
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case or:
                ;
                break;
              default:
                jj_la1[3] = jj_gen;
                break label_2;
              }
            }
          } catch (Throwable jjte002) {
            if (jjtc002) {
              jjtree.clearNodeScope(jjtn002);
              jjtc002 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte002 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte002;}
            }
            if (jjte002 instanceof ParseException) {
              {if (true) throw (ParseException)jjte002;}
            }
            {if (true) throw (Error)jjte002;}
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002,  i);
            }
          }
          break;
        case 40:
          jj_consume_token(40);
                ASTIdy jjtn003 = new ASTIdy(JJTIDY);
                boolean jjtc003 = true;
                jjtree.openNodeScope(jjtn003);
          try {
            simpleterm();
          } catch (Throwable jjte003) {
                if (jjtc003) {
                  jjtree.clearNodeScope(jjtn003);
                  jjtc003 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte003 instanceof RuntimeException) {
                  {if (true) throw (RuntimeException)jjte003;}
                }
                if (jjte003 instanceof ParseException) {
                  {if (true) throw (ParseException)jjte003;}
                }
                {if (true) throw (Error)jjte003;}
          } finally {
                if (jjtc003) {
                  jjtree.closeNodeScope(jjtn003,  2);
                }
          }
          break;
        case eq:
          jj_consume_token(eq);
                 ASTEq jjtn004 = new ASTEq(JJTEQ);
                 boolean jjtc004 = true;
                 jjtree.openNodeScope(jjtn004);
          try {
            simpleterm();
          } catch (Throwable jjte004) {
                 if (jjtc004) {
                   jjtree.clearNodeScope(jjtn004);
                   jjtc004 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte004 instanceof RuntimeException) {
                   {if (true) throw (RuntimeException)jjte004;}
                 }
                 if (jjte004 instanceof ParseException) {
                   {if (true) throw (ParseException)jjte004;}
                 }
                 {if (true) throw (Error)jjte004;}
          } finally {
                 if (jjtc004) {
                   jjtree.closeNodeScope(jjtn004,  2);
                 }
          }
          break;
        case leq:
          jj_consume_token(leq);
                  ASTLeq jjtn005 = new ASTLeq(JJTLEQ);
                  boolean jjtc005 = true;
                  jjtree.openNodeScope(jjtn005);
          try {
            simpleterm();
          } catch (Throwable jjte005) {
                  if (jjtc005) {
                    jjtree.clearNodeScope(jjtn005);
                    jjtc005 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte005 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte005;}
                  }
                  if (jjte005 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte005;}
                  }
                  {if (true) throw (Error)jjte005;}
          } finally {
                  if (jjtc005) {
                    jjtree.closeNodeScope(jjtn005,  2);
                  }
          }
          break;
        case geq:
          jj_consume_token(geq);
                  ASTGeq jjtn006 = new ASTGeq(JJTGEQ);
                  boolean jjtc006 = true;
                  jjtree.openNodeScope(jjtn006);
          try {
            simpleterm();
          } catch (Throwable jjte006) {
                  if (jjtc006) {
                    jjtree.clearNodeScope(jjtn006);
                    jjtc006 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte006 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte006;}
                  }
                  if (jjte006 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte006;}
                  }
                  {if (true) throw (Error)jjte006;}
          } finally {
                  if (jjtc006) {
                    jjtree.closeNodeScope(jjtn006,  2);
                  }
          }
          break;
        case 41:
          jj_consume_token(41);
                ASTLt jjtn007 = new ASTLt(JJTLT);
                boolean jjtc007 = true;
                jjtree.openNodeScope(jjtn007);
          try {
            simpleterm();
          } catch (Throwable jjte007) {
                if (jjtc007) {
                  jjtree.clearNodeScope(jjtn007);
                  jjtc007 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte007 instanceof RuntimeException) {
                  {if (true) throw (RuntimeException)jjte007;}
                }
                if (jjte007 instanceof ParseException) {
                  {if (true) throw (ParseException)jjte007;}
                }
                {if (true) throw (Error)jjte007;}
          } finally {
                if (jjtc007) {
                  jjtree.closeNodeScope(jjtn007,  2);
                }
          }
          break;
        case 42:
          jj_consume_token(42);
                ASTGt jjtn008 = new ASTGt(JJTGT);
                boolean jjtc008 = true;
                jjtree.openNodeScope(jjtn008);
          try {
            simpleterm();
          } catch (Throwable jjte008) {
                if (jjtc008) {
                  jjtree.clearNodeScope(jjtn008);
                  jjtc008 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte008 instanceof RuntimeException) {
                  {if (true) throw (RuntimeException)jjte008;}
                }
                if (jjte008 instanceof ParseException) {
                  {if (true) throw (ParseException)jjte008;}
                }
                {if (true) throw (Error)jjte008;}
          } finally {
                if (jjtc008) {
                  jjtree.closeNodeScope(jjtn008,  2);
                }
          }
          break;
        case 43:
            ASTAdd jjtn009 = new ASTAdd(JJTADD);
            boolean jjtc009 = true;
            jjtree.openNodeScope(jjtn009);
          try {
            label_3:
            while (true) {
              jj_consume_token(43);
              simpleterm();
                             i++;
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case 43:
                ;
                break;
              default:
                jj_la1[4] = jj_gen;
                break label_3;
              }
            }
          } catch (Throwable jjte009) {
            if (jjtc009) {
              jjtree.clearNodeScope(jjtn009);
              jjtc009 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte009 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte009;}
            }
            if (jjte009 instanceof ParseException) {
              {if (true) throw (ParseException)jjte009;}
            }
            {if (true) throw (Error)jjte009;}
          } finally {
            if (jjtc009) {
              jjtree.closeNodeScope(jjtn009,  i);
            }
          }
          break;
        case 44:
            ASTMult jjtn010 = new ASTMult(JJTMULT);
            boolean jjtc010 = true;
            jjtree.openNodeScope(jjtn010);
          try {
            label_4:
            while (true) {
              jj_consume_token(44);
              simpleterm();
                             i++;
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case 44:
                ;
                break;
              default:
                jj_la1[5] = jj_gen;
                break label_4;
              }
            }
          } catch (Throwable jjte010) {
            if (jjtc010) {
              jjtree.clearNodeScope(jjtn010);
              jjtc010 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte010 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte010;}
            }
            if (jjte010 instanceof ParseException) {
              {if (true) throw (ParseException)jjte010;}
            }
            {if (true) throw (Error)jjte010;}
          } finally {
            if (jjtc010) {
              jjtree.closeNodeScope(jjtn010,  i);
            }
          }
          break;
        case 45:
            ASTSeq jjtn011 = new ASTSeq(JJTSEQ);
            boolean jjtc011 = true;
            jjtree.openNodeScope(jjtn011);
          try {
            label_5:
            while (true) {
              jj_consume_token(45);
              simpleterm();
                             i++;
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case 45:
                ;
                break;
              default:
                jj_la1[6] = jj_gen;
                break label_5;
              }
            }
          } catch (Throwable jjte011) {
            if (jjtc011) {
              jjtree.clearNodeScope(jjtn011);
              jjtc011 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte011 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte011;}
            }
            if (jjte011 instanceof ParseException) {
              {if (true) throw (ParseException)jjte011;}
            }
            {if (true) throw (Error)jjte011;}
          } finally {
            if (jjtc011) {
              jjtree.closeNodeScope(jjtn011,  i);
            }
          }
          break;
        case fun:
        case mif:
        case let:
        case mtrue:
        case mfalse:
        case mnull:
        case print:
        case recv:
        case send:
        case at:
        case NUM:
        case TERMVAR:
        case 35:
        case 36:
        case 37:
        case 38:
            ASTApp jjtn012 = new ASTApp(JJTAPP);
            boolean jjtc012 = true;
            jjtree.openNodeScope(jjtn012);
          try {
            term();
          } catch (Throwable jjte012) {
            if (jjtc012) {
              jjtree.clearNodeScope(jjtn012);
              jjtc012 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte012 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte012;}
            }
            if (jjte012 instanceof ParseException) {
              {if (true) throw (ParseException)jjte012;}
            }
            {if (true) throw (Error)jjte012;}
          } finally {
            if (jjtc012) {
              jjtree.closeNodeScope(jjtn012,  2);
            }
          }
          break;
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
    } finally {
      trace_return("term");
    }
  }

  static final public void interm() throws ParseException {
    trace_call("interm");
    try {
  /*@bgen(jjtree) #Seq(> 1) */
  ASTSeq jjtn000 = new ASTSeq(JJTSEQ);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(in);
        simpleterm();
        label_6:
        while (true) {
          if (jj_2_1(2147483647)) {
            ;
          } else {
            break label_6;
          }
          jj_consume_token(45);
          simpleterm();
        }
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
          }
      }
    } finally {
      trace_return("interm");
    }
  }

  static final public void termvar() throws ParseException {
    trace_call("termvar");
    try {
  Token t;
      t = jj_consume_token(TERMVAR);
                                          ASTTermVar jjtn001 = new ASTTermVar(JJTTERMVAR);
                                          boolean jjtc001 = true;
                                          jjtree.openNodeScope(jjtn001);
      try {
                                          jjtree.closeNodeScope(jjtn001,  0);
                                          jjtc001 = false;
                                         jjtn001.value=t.image; jjtn001.line=t.beginLine; jjtn001.column=t.beginColumn;
      } finally {
                                          if (jjtc001) {
                                            jjtree.closeNodeScope(jjtn001,  0);
                                          }
      }
    } finally {
      trace_return("termvar");
    }
  }

  static final public void fun() throws ParseException {
    trace_call("fun");
    try {
  /*@bgen(jjtree) #Fun( 3) */
  ASTFun jjtn000 = new ASTFun(JJTFUN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(fun);
        type();
        termvar();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 46:
          funcont();
          break;
        case mapsto:
          funend();
          break;
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000,  3);
          }
      }
    } finally {
      trace_return("fun");
    }
  }

  static final public void funcont() throws ParseException {
    trace_call("funcont");
    try {
  /*@bgen(jjtree) #Fun( 3) */
  ASTFun jjtn000 = new ASTFun(JJTFUN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(46);
        type();
        termvar();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 46:
          funcont();
          break;
        case mapsto:
          funend();
          break;
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000,  3);
          }
      }
    } finally {
      trace_return("funcont");
    }
  }

  static final public void funend() throws ParseException {
    trace_call("funend");
    try {
      jj_consume_token(mapsto);
      simpleterm();
    } finally {
      trace_return("funend");
    }
  }

  static final public void let() throws ParseException {
    trace_call("let");
    try {
  /*@bgen(jjtree) #Let( 4) */
  ASTLet jjtn000 = new ASTLet(JJTLET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(let);
        type();
        termvar();
        jj_consume_token(set);
        term();
        interm();
      } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
      } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000,  4);
           }
      }
    } finally {
      trace_return("let");
    }
  }

  static final public void mif() throws ParseException {
    trace_call("mif");
    try {
  /*@bgen(jjtree) #If( 3) */
  ASTIf jjtn000 = new ASTIf(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(mif);
        term();
        jj_consume_token(mthen);
        simpleterm();
        jj_consume_token(melse);
        simpleterm();
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000,  3);
          }
      }
    } finally {
      trace_return("mif");
    }
  }

  static final public void recv() throws ParseException {
    trace_call("recv");
    try {
  /*@bgen(jjtree) #Recv( 4) */
  ASTRecv jjtn000 = new ASTRecv(JJTRECV);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(recv);
        type();
        termvar();
        jj_consume_token(from);
        termvar();
        interm();
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000,  4);
          }
      }
    } finally {
      trace_return("recv");
    }
  }

  static final public void send() throws ParseException {
    trace_call("send");
    try {
  /*@bgen(jjtree) #Send( 2) */
  ASTSend jjtn000 = new ASTSend(JJTSEND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(send);
        term();
        jj_consume_token(to);
        simpleterm();
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000,  2);
          }
      }
    } finally {
      trace_return("send");
    }
  }

  static final public void mnew() throws ParseException {
    trace_call("mnew");
    try {
  /*@bgen(jjtree) #New( 3) */
  ASTNew jjtn000 = new ASTNew(JJTNEW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(at);
        termvar();
        jj_consume_token(mnew);
        term();
        interm();
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000,  3);
          }
      }
    } finally {
      trace_return("mnew");
    }
  }

  static final public void type() throws ParseException {
    trace_call("type");
    try {
  /*@bgen(jjtree) #ArrowType(> 1) */
  ASTArrowType jjtn000 = new ASTArrowType(JJTARROWTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        simpletype();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case arrow:
          jj_consume_token(arrow);
          simpletype();
          break;
        default:
          jj_la1[11] = jj_gen;
          ;
        }
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
          }
      }
    } finally {
      trace_return("type");
    }
  }

  static final public void simpletype() throws ParseException {
    trace_call("simpletype");
    try {
  Token t;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 38:
        jj_consume_token(38);
        type();
        jj_consume_token(39);
        break;
      case TYPE:
        t = jj_consume_token(TYPE);
                                          ASTType jjtn001 = new ASTType(JJTTYPE);
                                          boolean jjtc001 = true;
                                          jjtree.openNodeScope(jjtn001);
        try {
                                          jjtree.closeNodeScope(jjtn001,  0);
                                          jjtc001 = false;
                                 jjtn001.value = t.image;
        } finally {
                                          if (jjtc001) {
                                            jjtree.closeNodeScope(jjtn001,  0);
                                          }
        }
        break;
      case TYPEVAR:
        t = jj_consume_token(TYPEVAR);
                                          ASTTypeVar jjtn002 = new ASTTypeVar(JJTTYPEVAR);
                                          boolean jjtc002 = true;
                                          jjtree.openNodeScope(jjtn002);
        try {
                                          jjtree.closeNodeScope(jjtn002,  0);
                                          jjtc002 = false;
                                         jjtn002.value = t.image;
        } finally {
                                          if (jjtc002) {
                                            jjtree.closeNodeScope(jjtn002,  0);
                                          }
        }
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("simpletype");
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_3_1() {
    if (jj_scan_token(45)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[13];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1,0x95c0d240,0x10000,0x20000,0x0,0x0,0x0,0x95dfd240,0x95dfd240,0x100,0x100,0x80,0x40000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x4,0x79,0x0,0x0,0x800,0x1000,0x2000,0x3f79,0x3f79,0x4000,0x4000,0x0,0x42,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[1];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    } else {
      trace_scan(jj_scanpos, kind);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[47];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 13; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 47; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static private int trace_indent = 0;
  static private boolean trace_enabled = true;

/** Enable tracing. */
  static final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  static final public void disable_tracing() {
    trace_enabled = false;
  }

  static private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  static private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  static private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  static private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
