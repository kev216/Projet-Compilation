import java.util.ArrayList;
import java.util.List;

/* Generated By:JJTree: Do not edit this line. ASTRecv.java Version 4.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTRecv extends SimpleNode implements Binder {
	public ASTRecv(int id) {
		super(id);
	}

	public ASTRecv(Parser p, int id) {
		super(p, id);
	}

	public Type getArgType() { return (Type)jjtGetChild(0); }
	public ASTTermVar getArg() { return  (ASTTermVar)jjtGetChild(1);}
	public ASTTermVar getSource() { return (ASTTermVar)jjtGetChild(2);}

	public List<VarOccurrence> declaredVars() { 
		VarOccurrence arg = new VarOccurrence(getArg().getName(),getArg());
		VarOccurrence occ = new VarOccurrence(getSource().getName(),getSource());
		List<VarOccurrence> l = new ArrayList<VarOccurrence>();
		l.add(arg);
		l.add(occ);	
		return l;
	}

	public List<Type> declaredTypes() {
		List<Type> l = new ArrayList<Type>();
		Type t = getArgType();
		l.add(t);
		ASTRef ty = new ASTRef(ParserTreeConstants.JJTTYPE);
		try {
			l.add(ty.type());
		} catch (TypeException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return l;
	}

	public Type type() throws TypeException {
		ASTTermVar y = (ASTTermVar)jjtGetChild(2);
		ASTTermVar x = (ASTTermVar)jjtGetChild(1);
		Node t = (Node)jjtGetChild(3);
		ASTRef reftype = new ASTRef(ParserTreeConstants.JJTTYPE);
		if(!y.type().equals(reftype.type()))
			throw new TypeException("The second child type is not Ref");
		/*if(!y.getBinder().equals(x.getBinder()))
		  throw new TypeException("x == y");*/
		return t.type();
	}

	public List<OOTStatement> code() throws TypeException {
		List<OOTStatement> listeRes = new ArrayList<OOTStatement>();
		List<OOTVar<? extends OOTType>> liste = new ArrayList<OOTVar<? extends OOTType>>();
		OOTVar<?> l = new OOTVar("public","l",new OOTTypeVoid());
		liste.add(l);
		OOTMethConnu take = new OOTMethConnu(liste,"take().val","");
		listeRes.add(take);
		return listeRes;
	}

}
/* JavaCC - OriginalChecksum=9e31f08a509189812f83754f60cc1a58 (do not edit this line) */
