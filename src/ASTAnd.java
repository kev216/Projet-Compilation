import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

/* Generated By:JJTree: Do not edit this line. ASTAnd.java Version 4.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTAnd extends SimpleNode implements Type {
  public ASTAnd(int id) {
    super(id);
  }

  public ASTAnd(Parser p, int id) {
    super(p, id);
  }
  
  public Node getLeft() { return (Node)jjtGetChild(0);}
  public Node getRight() { return (Node)jjtGetChild(1);}
	
  public Type type() throws TypeException {
	  Node left = (Node)jjtGetChild(0);
	  Node right = (Node)jjtGetChild(1);
	  ASTBool booltype = new ASTBool(ParserTreeConstants.JJTTYPE);
	  if(!left.type().equals(right.type()) || !left.type().equals(booltype.type()))
		  throw new TypeException("One of the two parts is not Boolean");
	  return booltype.type();	  
  }
  
	public List<OOTStatement> code() throws TypeException {
		OOTNode left=null;
		OOTNode right=null;
		OOTLog and=null;
		List<OOTStatement> ls = new ArrayList<OOTStatement>();
		int i=0;
		if(this.getLeft() instanceof ASTGt || this.getLeft() instanceof ASTLt || this.getLeft() instanceof ASTGeq || this.getLeft() instanceof ASTLeq || this.getLeft() instanceof ASTEq) {
			//> < =.........
			ls.addAll(getLeft().code());
			left = ls.get(i);
			i++;
		} else {	  //Node....
			SimpleNode l = (SimpleNode)this.jjtGetChild(0);
			left = new OOTConstant<OOTTypeInt>(new OOTTypeInt(),String.valueOf(l.jjtGetValue())); 
		}

		if(this.getRight() instanceof ASTGt || this.getRight() instanceof ASTLt || this.getRight() instanceof ASTGeq || this.getRight() instanceof ASTLeq || this.getRight() instanceof ASTEq) {
			ls.addAll(this.getRight().code()) ;
			right = ls.get(i);
			i++;
		} else {
			SimpleNode r = (SimpleNode)this.jjtGetChild(1);
			right = new OOTConstant<OOTTypeBool>(new OOTTypeBool(),String.valueOf(r.jjtGetValue()));
			and = new OOTLog(left,right,"&&");
		}

		and= new OOTLog(left,right," && ");
		ls = new ArrayList<OOTStatement>();
		ls.add(and);
		Iterator<OOTStatement> it = ls.iterator();
		while(it.hasNext()) {
			System.out.println(it.next().genCodeNode("toto"));//???????????????????
		}
		return ls;
	}

}
/* JavaCC - OriginalChecksum=2950eb9cbdf7e04e2dbe37d88e33a769 (do not edit this line) */
