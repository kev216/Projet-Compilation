/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Parser.jj */
/*@egen*///************************************************
// AUTHOR: Pablo Arrighi (pablo.arrighi@imag.fr)
// DATE: January 2008
//************************************************

options {
             
                         
  KEEP_LINE_COLUMN=true;
}

PARSER_BEGIN(Parser)

//************************************************
// AUTHOR: Pablo Arrighi (pablo.arrighi@imag.fr)
// DATE: January 2008
//************************************************
public class Parser/*@bgen(jjtree)*/implements ParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTParserState jjtree = new JJTParserState();

/*@egen*/
}

PARSER_END(Parser)

SKIP :
{
	" " 
	| "\t" 
	| "\n" 
	| "\r" 
	| < "//" (~["\n"])* "\n" >
}


TOKEN :
{	
	  <fun: "fun"> | <arrow: "->"> | <mapsto: "|->">
	| <mif: "if"> | <mthen: "then"> | <melse: "else"> 
	| <let: "let"> | <in: "in">
	| <mtrue: "true"> | <mfalse: "false"> | <and: "and"> | <or: "or">
	| <eq: "=="> | <leq: ("<="|"=<") >  | <geq: (">="|"=>") > | <set: "=">
	| <mnull: "O" > | <print: "print_int" >
	| <recv: "recv"> | <from: "from"> 
	| <send: "send"> | <to: "to">
	| <at: "at"> | <mnew: "new">
	| <TYPE:  ("Bool" | "Int" | "Ref" | "Proc")> 
	| <NUM: (["0"-"9"])+ >
	| <TERMVAR: ["a"-"z"](["a"-"z","A"-"Z","_","0"-"9"])* >
	| <TYPEVAR: ["A"-"Z"](["a"-"z","A"-"Z","_","0"-"9"])* >
	
}

ASTStart start() 													         
:{/*@bgen(jjtree) #Start( 1) */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #Start( 1) */
        try {
/*@egen*/
	term() (<EOF> | ".")/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000,  1);
          jjtc000 = false;
        }
/*@egen*/
	{return jjtn000;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000,  1);
          }
        }
/*@egen*/												
}

void simpleterm() :
{Token t;}
{	
	fun() 
	| let()	
	| mif()	
	| <mtrue>/*@bgen(jjtree) #Bool( 0) */
                                        {
                                          ASTBool jjtn001 = new ASTBool(JJTBOOL);
                                          boolean jjtc001 = true;
                                          jjtree.openNodeScope(jjtn001);
                                        }
                                        try {
/*@egen*//*@bgen(jjtree)*/
                                        {
                                          jjtree.closeNodeScope(jjtn001,  0);
                                          jjtc001 = false;
                                        }
/*@egen*/ 			{jjtn001.value=true;}/*@bgen(jjtree)*/
                                        } finally {
                                          if (jjtc001) {
                                            jjtree.closeNodeScope(jjtn001,  0);
                                          }
                                        }
/*@egen*/						        			
	| <mfalse>/*@bgen(jjtree) #Bool( 0) */
                                        {
                                          ASTBool jjtn002 = new ASTBool(JJTBOOL);
                                          boolean jjtc002 = true;
                                          jjtree.openNodeScope(jjtn002);
                                        }
                                        try {
/*@egen*//*@bgen(jjtree)*/
                                        {
                                          jjtree.closeNodeScope(jjtn002,  0);
                                          jjtc002 = false;
                                        }
/*@egen*/ 			{jjtn002.value=false;}/*@bgen(jjtree)*/
                                        } finally {
                                          if (jjtc002) {
                                            jjtree.closeNodeScope(jjtn002,  0);
                                          }
                                        }
/*@egen*/						        
	| "!"/*@bgen(jjtree) #Not( 1) */
              {
                ASTNot jjtn003 = new ASTNot(JJTNOT);
                boolean jjtc003 = true;
                jjtree.openNodeScope(jjtn003);
              }
              try {
/*@egen*/ simpleterm()/*@bgen(jjtree)*/
              } catch (Throwable jjte003) {
                if (jjtc003) {
                  jjtree.clearNodeScope(jjtn003);
                  jjtc003 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte003 instanceof RuntimeException) {
                  throw (RuntimeException)jjte003;
                }
                if (jjte003 instanceof ParseException) {
                  throw (ParseException)jjte003;
                }
                throw (Error)jjte003;
              } finally {
                if (jjtc003) {
                  jjtree.closeNodeScope(jjtn003,  1);
                }
              }
/*@egen*/												       
	| t=<NUM>/*@bgen(jjtree) #Int( 0) */
                                        {
                                          ASTInt jjtn004 = new ASTInt(JJTINT);
                                          boolean jjtc004 = true;
                                          jjtree.openNodeScope(jjtn004);
                                        }
                                        try {
/*@egen*//*@bgen(jjtree)*/
                                        {
                                          jjtree.closeNodeScope(jjtn004,  0);
                                          jjtc004 = false;
                                        }
/*@egen*/ 			{jjtn004.value=Integer.parseInt(t.image);}/*@bgen(jjtree)*/
                                        } finally {
                                          if (jjtc004) {
                                            jjtree.closeNodeScope(jjtn004,  0);
                                          }
                                        }
/*@egen*/	       
	| "-"/*@bgen(jjtree) #Opp( 1) */
              {
                ASTOpp jjtn005 = new ASTOpp(JJTOPP);
                boolean jjtc005 = true;
                jjtree.openNodeScope(jjtn005);
              }
              try {
/*@egen*/ simpleterm()/*@bgen(jjtree)*/
              } catch (Throwable jjte005) {
                if (jjtc005) {
                  jjtree.clearNodeScope(jjtn005);
                  jjtc005 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte005 instanceof RuntimeException) {
                  throw (RuntimeException)jjte005;
                }
                if (jjte005 instanceof ParseException) {
                  throw (ParseException)jjte005;
                }
                throw (Error)jjte005;
              } finally {
                if (jjtc005) {
                  jjtree.closeNodeScope(jjtn005,  1);
                }
              }
/*@egen*/ 												       
	| "#" t=<NUM>/*@bgen(jjtree) #Ref( 0) */
                                {
                                  ASTRef jjtn006 = new ASTRef(JJTREF);
                                  boolean jjtc006 = true;
                                  jjtree.openNodeScope(jjtn006);
                                }
                                try {
/*@egen*//*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn006,  0);
                                  jjtc006 = false;
                                }
/*@egen*/		{jjtn006.value=Integer.parseInt(t.image);}/*@bgen(jjtree)*/
                                } finally {
                                  if (jjtc006) {
                                    jjtree.closeNodeScope(jjtn006,  0);
                                  }
                                }
/*@egen*/	       
	|/*@bgen(jjtree) #Null( 0) */
          {
            ASTNull jjtn007 = new ASTNull(JJTNULL);
            boolean jjtc007 = true;
            jjtree.openNodeScope(jjtn007);
          }
          try {
/*@egen*/ <mnull>/*@bgen(jjtree)*/
          } finally {
            if (jjtc007) {
              jjtree.closeNodeScope(jjtn007,  0);
            }
          }
/*@egen*/ 														        
	| <print>/*@bgen(jjtree) #Print( 1) */
                  {
                    ASTPrint jjtn008 = new ASTPrint(JJTPRINT);
                    boolean jjtc008 = true;
                    jjtree.openNodeScope(jjtn008);
                  }
                  try {
/*@egen*/ simpleterm()/*@bgen(jjtree)*/
                  } catch (Throwable jjte008) {
                    if (jjtc008) {
                      jjtree.clearNodeScope(jjtn008);
                      jjtc008 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte008 instanceof RuntimeException) {
                      throw (RuntimeException)jjte008;
                    }
                    if (jjte008 instanceof ParseException) {
                      throw (ParseException)jjte008;
                    }
                    throw (Error)jjte008;
                  } finally {
                    if (jjtc008) {
                      jjtree.closeNodeScope(jjtn008,  1);
                    }
                  }
/*@egen*/											         
	| recv()
	| send()
	| mnew()
	| termvar() 			
	| "(" term() ")" 
}

void term()
:{int i=1;}
{
	simpleterm()
	[/*@bgen(jjtree) #And( i) */
          {
            ASTAnd jjtn001 = new ASTAnd(JJTAND);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
          }
          try {
/*@egen*/ (<and> simpleterm() {i++;})+/*@bgen(jjtree)*/
          } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              throw (RuntimeException)jjte001;
            }
            if (jjte001 instanceof ParseException) {
              throw (ParseException)jjte001;
            }
            throw (Error)jjte001;
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  i);
            }
          }
/*@egen*/									       
	|/*@bgen(jjtree) #Or( i) */
          {
            ASTOr jjtn002 = new ASTOr(JJTOR);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
          }
          try {
/*@egen*/ (<or> simpleterm() {i++;})+/*@bgen(jjtree)*/
          } catch (Throwable jjte002) {
            if (jjtc002) {
              jjtree.clearNodeScope(jjtn002);
              jjtc002 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte002 instanceof RuntimeException) {
              throw (RuntimeException)jjte002;
            }
            if (jjte002 instanceof ParseException) {
              throw (ParseException)jjte002;
            }
            throw (Error)jjte002;
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002,  i);
            }
          }
/*@egen*/ 									      
	| "~"/*@bgen(jjtree) #Idy( 2) */
              {
                ASTIdy jjtn003 = new ASTIdy(JJTIDY);
                boolean jjtc003 = true;
                jjtree.openNodeScope(jjtn003);
              }
              try {
/*@egen*/ simpleterm()/*@bgen(jjtree)*/
              } catch (Throwable jjte003) {
                if (jjtc003) {
                  jjtree.clearNodeScope(jjtn003);
                  jjtc003 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte003 instanceof RuntimeException) {
                  throw (RuntimeException)jjte003;
                }
                if (jjte003 instanceof ParseException) {
                  throw (ParseException)jjte003;
                }
                throw (Error)jjte003;
              } finally {
                if (jjtc003) {
                  jjtree.closeNodeScope(jjtn003,  2);
                }
              }
/*@egen*/ 												       
	| <eq>/*@bgen(jjtree) #Eq( 2) */
               {
                 ASTEq jjtn004 = new ASTEq(JJTEQ);
                 boolean jjtc004 = true;
                 jjtree.openNodeScope(jjtn004);
               }
               try {
/*@egen*/ simpleterm()/*@bgen(jjtree)*/
               } catch (Throwable jjte004) {
                 if (jjtc004) {
                   jjtree.clearNodeScope(jjtn004);
                   jjtc004 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte004 instanceof RuntimeException) {
                   throw (RuntimeException)jjte004;
                 }
                 if (jjte004 instanceof ParseException) {
                   throw (ParseException)jjte004;
                 }
                 throw (Error)jjte004;
               } finally {
                 if (jjtc004) {
                   jjtree.closeNodeScope(jjtn004,  2);
                 }
               }
/*@egen*/												      
	| <leq>/*@bgen(jjtree) #Leq( 2) */
                {
                  ASTLeq jjtn005 = new ASTLeq(JJTLEQ);
                  boolean jjtc005 = true;
                  jjtree.openNodeScope(jjtn005);
                }
                try {
/*@egen*/ simpleterm()/*@bgen(jjtree)*/
                } catch (Throwable jjte005) {
                  if (jjtc005) {
                    jjtree.clearNodeScope(jjtn005);
                    jjtc005 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte005 instanceof RuntimeException) {
                    throw (RuntimeException)jjte005;
                  }
                  if (jjte005 instanceof ParseException) {
                    throw (ParseException)jjte005;
                  }
                  throw (Error)jjte005;
                } finally {
                  if (jjtc005) {
                    jjtree.closeNodeScope(jjtn005,  2);
                  }
                }
/*@egen*/ 											       
	| <geq>/*@bgen(jjtree) #Geq( 2) */
                {
                  ASTGeq jjtn006 = new ASTGeq(JJTGEQ);
                  boolean jjtc006 = true;
                  jjtree.openNodeScope(jjtn006);
                }
                try {
/*@egen*/ simpleterm()/*@bgen(jjtree)*/
                } catch (Throwable jjte006) {
                  if (jjtc006) {
                    jjtree.clearNodeScope(jjtn006);
                    jjtc006 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte006 instanceof RuntimeException) {
                    throw (RuntimeException)jjte006;
                  }
                  if (jjte006 instanceof ParseException) {
                    throw (ParseException)jjte006;
                  }
                  throw (Error)jjte006;
                } finally {
                  if (jjtc006) {
                    jjtree.closeNodeScope(jjtn006,  2);
                  }
                }
/*@egen*/ 											       
	| "<"/*@bgen(jjtree) #Lt( 2) */
              {
                ASTLt jjtn007 = new ASTLt(JJTLT);
                boolean jjtc007 = true;
                jjtree.openNodeScope(jjtn007);
              }
              try {
/*@egen*/ simpleterm()/*@bgen(jjtree)*/
              } catch (Throwable jjte007) {
                if (jjtc007) {
                  jjtree.clearNodeScope(jjtn007);
                  jjtc007 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte007 instanceof RuntimeException) {
                  throw (RuntimeException)jjte007;
                }
                if (jjte007 instanceof ParseException) {
                  throw (ParseException)jjte007;
                }
                throw (Error)jjte007;
              } finally {
                if (jjtc007) {
                  jjtree.closeNodeScope(jjtn007,  2);
                }
              }
/*@egen*/ 												      
	| ">"/*@bgen(jjtree) #Gt( 2) */
              {
                ASTGt jjtn008 = new ASTGt(JJTGT);
                boolean jjtc008 = true;
                jjtree.openNodeScope(jjtn008);
              }
              try {
/*@egen*/ simpleterm()/*@bgen(jjtree)*/
              } catch (Throwable jjte008) {
                if (jjtc008) {
                  jjtree.clearNodeScope(jjtn008);
                  jjtc008 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte008 instanceof RuntimeException) {
                  throw (RuntimeException)jjte008;
                }
                if (jjte008 instanceof ParseException) {
                  throw (ParseException)jjte008;
                }
                throw (Error)jjte008;
              } finally {
                if (jjtc008) {
                  jjtree.closeNodeScope(jjtn008,  2);
                }
              }
/*@egen*/												      
	|/*@bgen(jjtree) #Add( i) */
          {
            ASTAdd jjtn009 = new ASTAdd(JJTADD);
            boolean jjtc009 = true;
            jjtree.openNodeScope(jjtn009);
          }
          try {
/*@egen*/ ("+" simpleterm() {i++;})+/*@bgen(jjtree)*/
          } catch (Throwable jjte009) {
            if (jjtc009) {
              jjtree.clearNodeScope(jjtn009);
              jjtc009 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte009 instanceof RuntimeException) {
              throw (RuntimeException)jjte009;
            }
            if (jjte009 instanceof ParseException) {
              throw (ParseException)jjte009;
            }
            throw (Error)jjte009;
          } finally {
            if (jjtc009) {
              jjtree.closeNodeScope(jjtn009,  i);
            }
          }
/*@egen*/  									       
	|/*@bgen(jjtree) #Mult( i) */
          {
            ASTMult jjtn010 = new ASTMult(JJTMULT);
            boolean jjtc010 = true;
            jjtree.openNodeScope(jjtn010);
          }
          try {
/*@egen*/ ("*" simpleterm() {i++;})+/*@bgen(jjtree)*/
          } catch (Throwable jjte010) {
            if (jjtc010) {
              jjtree.clearNodeScope(jjtn010);
              jjtc010 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte010 instanceof RuntimeException) {
              throw (RuntimeException)jjte010;
            }
            if (jjte010 instanceof ParseException) {
              throw (ParseException)jjte010;
            }
            throw (Error)jjte010;
          } finally {
            if (jjtc010) {
              jjtree.closeNodeScope(jjtn010,  i);
            }
          }
/*@egen*/  									        
	|/*@bgen(jjtree) #Seq( i) */
          {
            ASTSeq jjtn011 = new ASTSeq(JJTSEQ);
            boolean jjtc011 = true;
            jjtree.openNodeScope(jjtn011);
          }
          try {
/*@egen*/ (";" simpleterm() {i++;})+/*@bgen(jjtree)*/
          } catch (Throwable jjte011) {
            if (jjtc011) {
              jjtree.clearNodeScope(jjtn011);
              jjtc011 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte011 instanceof RuntimeException) {
              throw (RuntimeException)jjte011;
            }
            if (jjte011 instanceof ParseException) {
              throw (ParseException)jjte011;
            }
            throw (Error)jjte011;
          } finally {
            if (jjtc011) {
              jjtree.closeNodeScope(jjtn011,  i);
            }
          }
/*@egen*/ 									       
	|/*@bgen(jjtree) #App( 2) */
          {
            ASTApp jjtn012 = new ASTApp(JJTAPP);
            boolean jjtc012 = true;
            jjtree.openNodeScope(jjtn012);
          }
          try {
/*@egen*/ term()/*@bgen(jjtree)*/
          } catch (Throwable jjte012) {
            if (jjtc012) {
              jjtree.clearNodeScope(jjtn012);
              jjtc012 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte012 instanceof RuntimeException) {
              throw (RuntimeException)jjte012;
            }
            if (jjte012 instanceof ParseException) {
              throw (ParseException)jjte012;
            }
            throw (Error)jjte012;
          } finally {
            if (jjtc012) {
              jjtree.closeNodeScope(jjtn012,  2);
            }
          }
/*@egen*/	  													       
	]
}

void interm() 														        
:{/*@bgen(jjtree) #Seq(> 1) */
  ASTSeq jjtn000 = new ASTSeq(JJTSEQ);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #Seq(> 1) */
        try {
/*@egen*/	<in>
	simpleterm()  
	(
	LOOKAHEAD(";")
	";" simpleterm()
	)*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/ 																
}

void termvar()
:{Token t;}
{
	t=<TERMVAR>/*@bgen(jjtree) #TermVar( 0) */
                                        {
                                          ASTTermVar jjtn001 = new ASTTermVar(JJTTERMVAR);
                                          boolean jjtc001 = true;
                                          jjtree.openNodeScope(jjtn001);
                                        }
                                        try {
/*@egen*//*@bgen(jjtree)*/
                                        {
                                          jjtree.closeNodeScope(jjtn001,  0);
                                          jjtc001 = false;
                                        }
/*@egen*/ 			{jjtn001.value=t.image; jjtn001.line=t.beginLine; jjtn001.column=t.beginColumn;}/*@bgen(jjtree)*/
                                        } finally {
                                          if (jjtc001) {
                                            jjtree.closeNodeScope(jjtn001,  0);
                                          }
                                        }
/*@egen*/
																	           
}

void fun() 															       
:{/*@bgen(jjtree) #Fun( 3) */
  ASTFun jjtn000 = new ASTFun(JJTFUN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #Fun( 3) */
        try {
/*@egen*/
	<fun> type() termvar() (funcont() | funend())/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000,  3);
          }
        }
/*@egen*/				
}

void funcont()														       
:{/*@bgen(jjtree) #Fun( 3) */
  ASTFun jjtn000 = new ASTFun(JJTFUN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}													
{/*@bgen(jjtree) #Fun( 3) */
        try {
/*@egen*/
	"," type() termvar() (funcont() | funend())/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000,  3);
          }
        }
/*@egen*/
}

void funend()
:{}
{
	<mapsto> simpleterm()
}

void let() 															       
:{/*@bgen(jjtree) #Let( 4) */
  ASTLet jjtn000 = new ASTLet(JJTLET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #Let( 4) */
         try {
/*@egen*/	
	 <let> type() termvar() <set> term() interm()/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000,  4);
           }
         }
/*@egen*/
}

void mif() 															      
:{/*@bgen(jjtree) #If( 3) */
  ASTIf jjtn000 = new ASTIf(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #If( 3) */
        try {
/*@egen*/
	<mif> term() <mthen> simpleterm() <melse> simpleterm()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000,  3);
          }
        }
/*@egen*/				
}

void recv() 														        
:{/*@bgen(jjtree) #Recv( 4) */
  ASTRecv jjtn000 = new ASTRecv(JJTRECV);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #Recv( 4) */
        try {
/*@egen*/ 
	<recv> type() termvar() <from> termvar() interm()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000,  4);
          }
        }
/*@egen*/					
}

void send() 														        
:{/*@bgen(jjtree) #Send( 2) */
  ASTSend jjtn000 = new ASTSend(JJTSEND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #Send( 2) */
        try {
/*@egen*/ 
	<send> term() <to> simpleterm()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000,  2);
          }
        }
/*@egen*/									
}

void mnew() 														       
:{/*@bgen(jjtree) #New( 3) */
  ASTNew jjtn000 = new ASTNew(JJTNEW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #New( 3) */
        try {
/*@egen*/
	<at> termvar() <mnew> term() interm()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000,  3);
          }
        }
/*@egen*/						
}

void type() 														              
:{/*@bgen(jjtree) #ArrowType(> 1) */
  ASTArrowType jjtn000 = new ASTArrowType(JJTARROWTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #ArrowType(> 1) */
        try {
/*@egen*/
	simpletype() (<arrow> simpletype() )?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/  
}

void simpletype()
:{Token t;}
{
	"(" type() ")"
	| t=<TYPE>/*@bgen(jjtree) #Type( 0) */
                                        {
                                          ASTType jjtn001 = new ASTType(JJTTYPE);
                                          boolean jjtc001 = true;
                                          jjtree.openNodeScope(jjtn001);
                                        }
                                        try {
/*@egen*//*@bgen(jjtree)*/
                                        {
                                          jjtree.closeNodeScope(jjtn001,  0);
                                          jjtc001 = false;
                                        }
/*@egen*/			{jjtn001.value = t.image;}/*@bgen(jjtree)*/
                                        } finally {
                                          if (jjtc001) {
                                            jjtree.closeNodeScope(jjtn001,  0);
                                          }
                                        }
/*@egen*/					        
	| t=<TYPEVAR>/*@bgen(jjtree) #TypeVar( 0) */
                                        {
                                          ASTTypeVar jjtn002 = new ASTTypeVar(JJTTYPEVAR);
                                          boolean jjtc002 = true;
                                          jjtree.openNodeScope(jjtn002);
                                        }
                                        try {
/*@egen*//*@bgen(jjtree)*/
                                        {
                                          jjtree.closeNodeScope(jjtn002,  0);
                                          jjtc002 = false;
                                        }
/*@egen*/ 			{jjtn002.value = t.image;}/*@bgen(jjtree)*/
                                        } finally {
                                          if (jjtc002) {
                                            jjtree.closeNodeScope(jjtn002,  0);
                                          }
                                        }
/*@egen*/				           
}


















