import java.io.IOException;
import java.util.List;

/* Generated By:JJTree: Do not edit this line. Node.java Version 4.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
/* All AST nodes must implement this interface.  It provides basic
   machinery for constructing the parent and child relationships
   between nodes. */

public interface Node {
	

/* THE METHODS THAT I WANT COMMON TO ALL ASTXXX CLASSES */	
	
	  public void dump(String prefix);	
	  
	  /**
	   * @param boundvars is a list of variables that are bound by binders on top of this AST sub-term
	   * @return a list of the occurrences of free variables within this AST sub-term
	   * we make sure that variables get tied up to their binder in the process
	   * i.e. we update their binder field.
	   */
	  public List<VarOccurrence> findFreeBound(List<VarOccurrence> boundvars);
	  
	  /**
	   * @return a pointer towards an ASTType holding the type of this subterm
	   * @throws TypeException
	   */
	  public Type type() throws TypeException;
	
	
/* JJTREE GENERATED STUFF */

  /** This method is called after the node has been made the current
    node.  It indicates that child nodes can now be added to it. */
  public void jjtOpen();

  /** This method is called after all the child nodes have been
    added. */
  public void jjtClose();

  /** This pair of methods are used to inform the node of its
    parent. */
  public void jjtSetParent(Node n);
  public Node jjtGetParent();

  /** This method tells the node to add its argument to the node's
    list of children.  */
  public void jjtAddChild(Node n, int i);

  /** This method returns a child node.  The children are numbered
     from zero, left to right. */
  public Node jjtGetChild(int i);

  /** Return the number of children the node has. */
  public int jjtGetNumChildren();

  public List<OOTStatement> code() throws TypeException;
}
/* JavaCC - OriginalChecksum=c2d4c2fd1e83ef794e734e0696b0a564 (do not edit this line) */
