import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

/* Generated By:JJTree: Do not edit this line. ASTPrint.java Version 4.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTPrint extends SimpleNode {
  public ASTPrint(int id) {
    super(id);
  }

  public ASTPrint(Parser p, int id) {
    super(p, id);
  }
  
  public Node getAfficher() {return (Node)jjtGetChild(0);}
  
  public Type type() {
	  
	  ASTType procType=new ASTType(ParserTreeConstants.JJTTYPE);
	  procType.jjtSetValue("Proc");
	  return procType;
  }

  public List<OOTStatement> code() throws TypeException{
	  List<OOTStatement> listeRes = new ArrayList<OOTStatement>();
	  OOTVar<OOTTypeNone> syst = new OOTVar<OOTTypeNone>("public","System",new OOTTypeNone());
	  OOTVar<OOTTypeNone> out = new OOTVar<OOTTypeNone>("public","out",new OOTTypeNone());
	  List<OOTVar<?extends OOTType>> params = new ArrayList<OOTVar<? extends OOTType>>();
	  params.add(syst);
	  params.add(out);
	  List<OOTStatement> statesMeth = getAfficher().code();
	  String res = "";
	  Iterator<OOTStatement> it = statesMeth.iterator();
	  while(it.hasNext())
		  res += it.next().genCodeNode("");
	  OOTMethConnu methC = new OOTMethConnu(params,"println",res);
	  listeRes.add(methC);
	  return listeRes;
  }
}
/* JavaCC - OriginalChecksum=f350f4f6e58087ae787f0153242b38c0 (do not edit this line) */
