import java.util.List;
import java.util.ArrayList;

/* Generated By:JJTree: Do not edit this line. ASTTermVar.java Version 4.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTTermVar extends SimpleNode {
  public ASTTermVar(int id) {
    super(id);
  }

  public ASTTermVar(Parser p, int id) {
    super(p, id);
  }

  /* MY CUSTOMIZATION OF ASTTermVar */
  
  protected ASTTermVar binder; 
  	// will point towards the binding occurrence of this variable in the AST
  protected int line; 
	// line of occurrence in the code
  protected int column; 
	// column of occurrence in the code

  public String getLineColumn(){return "L"+line+"C"+column;}
  
  public String getBinder(){
	  if (binder==null) {return "free";}
	  else {return "bound to "+binder.getLineColumn();}  
  }
  
  public void setBinder(ASTTermVar bi) {
	  this.binder = bi;
  }
  
  public String getName() {return (String) jjtGetValue();}
	// access the name of the variable, retrieved during parsing

  public String toString() {return super.toString()+" "+getName()+" "+getBinder();}
  	// override the way this node displays so as to give the variable name
  
  public List<VarOccurrence> findFreeBound(List<VarOccurrence> boundvars){
	  //We have found a variable. We create a VariableOccurrence.
	  VarOccurrence occ=new VarOccurrence(getName(),this);
	  List<VarOccurrence> l=new ArrayList<VarOccurrence>();
	  //Was this variable bounded?
	  int i = boundvars.indexOf(occ);
	  System.out.println("Looking for "+occ+" in "+boundvars);
	  //No - then this is a free occurrence and needs be returned
	  if (i==-1) {l.add(occ); System.out.println("Not found.");} 
	  //Yes - then we need to update its binder attribute so that it points to the binding occurrence
	  else {binder=boundvars.get(i).position; System.out.println("Found.");};
	  return l;
  }	  

  public Type type() throws TypeException {
	  if (binder==null) 
		  throw new TypeException("You has put a undeclared variable "+this.getName()); 
	  //The type of a variable is that of its binding occurrence 
	  if (!(binder.jjtGetParent() instanceof Binder)) 
		  throw new TypeException("Cannot retrieve binder construct of a bound variable"); 
	  Binder par = (Binder) binder.jjtGetParent(); 
	  //the type of the binding occurrence is held in the binding construct just above
	  List<VarOccurrence> dec=par.declaredVars();
	  List<Type> typ=par.declaredTypes();
	  //see what was the parent declaring, and of which types
	  VarOccurrence occ=new VarOccurrence(binder.getName(),binder);
	  int i=dec.indexOf(occ);
	  //find your rank in the declaration that were mare by the parent
	  if (i==-1)
		  throw new TypeException("Cannot retrieve bound variable in its binding construct");
	  return typ.get(i);
	  //return the corresponding type
  }  
  
  public List<OOTStatement> code() throws TypeException {
	  List<OOTStatement> liste = new ArrayList<OOTStatement>();
	  ASTInt inttype = new ASTInt(ParserTreeConstants.JJTTYPE);
	  ASTBool booltype = new ASTBool(ParserTreeConstants.JJTTYPE);
	  ASTProc voidtype = new ASTProc(ParserTreeConstants.JJTTYPE);
	  if(this.type().equals(inttype.type())) {
		  OOTVar<OOTTypeInt> var = new OOTVar<OOTTypeInt>("public",this.getName(),new OOTTypeInt());
		  OOTVarCall<OOTTypeInt> vc = new OOTVarCall<OOTTypeInt>(var);
		  liste.add(vc);	  
	  } else if(this.type().equals(booltype.type())){
		  OOTVar<OOTTypeBool> var = new OOTVar<OOTTypeBool>("public",this.getName(),new OOTTypeBool());
		  OOTVarCall<OOTTypeBool> vc = new OOTVarCall<OOTTypeBool>(var);
		  liste.add(vc);
	  } else if(this.type().equals(voidtype.type())) {
		  OOTVar<OOTTypeVoid> var = new OOTVar<OOTTypeVoid>("public",this.getName(),new OOTTypeVoid());
		  //OOTVarCall<OOTTypeVoid> vc = new OOTVarCall<OOTTypeVoid>(var);
		  liste.add(var);
	  }
	  return liste;
  }


  
}
/* JavaCC - OriginalChecksum=7ea265e8c1a92761e1ecdc765e751c6d (do not edit this line) */
